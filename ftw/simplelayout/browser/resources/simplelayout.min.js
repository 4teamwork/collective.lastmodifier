(function($) {
if(!$) {
  throw new Error('JQuery is not defined.');
}
if(!$.ui) {
  throw new Error('JQuery-UI is not defined.');
}
if(!$.templates) {
  throw new Error('jsrender is not defined');
}/**
 * @license almond 0.3.0 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                name = baseParts.concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("../node_modules/almond/almond", function(){});

define('simplelayout/Block',[], function() {



  function Block(type, height) {

    if (!(this instanceof Block)) {
      throw new TypeError("Block constructor cannot be called as a function.");
    }

    if (!type) {
      throw new ReferenceError("Type must be defined.");
    }

    var template = $.templates("<div data-type='{{:type}}' class='sl-block'><div class='sl-block-content'>{{:data}}</div></div>");

    return {

      committed : false,

      type : type,

      height : height,

      getElement: function() {
        return this.element;
      },

      create: function(_data) {
        var that = this;
        var data = {
          'data': _data
        };
        data.type = type;
        this.element = $(template.render(data)).height(this.height);
        return this.element;
      },

      content : function(content) {
        $('.sl-block-content', this.element).html(content);
      },

      toJSON : function() {
        return {type : this.type, height : this.height};
      }
    };

  }
  return Block;

});

define('simplelayout/Column',['simplelayout/Block'], function(Block) {



  function Column(width) {
    if (!(this instanceof Column)) {
      throw new TypeError("Column constructor cannot be called as a function.");
    }

    var blockId = 0;

    var template = $.templates("<div class='sl-column' style='width: {{:width}};'></div>");

    return {

      blocks : {},

      getElement: function() {
        return this.element;
      },

      create : function() {
        this.element = $(template.render({'width' : width}));
      },

      insertBlock: function(type, content, height) {
        var id = blockId;
        var block = new Block(type, height);
        block.create(content);
        block.getElement().data('block-id', id);
        block.getElement().data('column-id', this.getElement().data('column-id'));
        block.getElement().data('layout-id', this.getElement().data('layout-id'));
        this.getElement().append(block.getElement());
        this.blocks[id] = block;
        blockId++;
        return id;
      },

      deleteBlock: function(blockId) {
        if(!this.blocks[blockId]) {
          throw new Error('No block with id ' + blockId + ' inserted.');
        }
        this.blocks[blockId].getElement().remove();
        delete this.blocks[blockId];
      },

      commitBlocks: function() {
        if(Object.keys(this.getCommittedBlocks()).length === Object.keys(this.getBlocks()).length) {
          throw new Error('No blocks inserted.');
        }
        for(var key in this.blocks) {
          this.blocks[key].committed = true;
        }
      },

      getCommittedBlocks: function() {
        var committedBlocks = {};
        for(var key in this.blocks) {
          if(this.blocks[key].committed) {
            committedBlocks[key] = this.blocks[key];
          }
        }
        return committedBlocks;
      },

      getBlocks: function() {
        return this.blocks;
      },

      toJSON : function() {
        return {blocks : this.blocks};
      }

    };
  }

  return Column;

});

define('simplelayout/Layout',['simplelayout/Column'], function(Column) {



  function Layout(columns) {
    if (!(this instanceof Layout)) {
      throw new TypeError("Layout constructor cannot be called as a function.");
    }
    if (!columns) {
      throw new TypeError("columns must be defined");
    }

    var template = $.templates("<div class='sl-layout'></div>");

    return {

      committed : false,

      columns : {},

      getElement: function() {
        return this.element;
      },

      create : function(id) {
        this.element = $(template.render());
        var columnWidth = 100 / columns + "%";
        for (var i = 0; i < columns; i++) {
          var column = new Column(columnWidth);
          this.columns[i] = column;
          column.create();
          column.getElement().data('column-id', i);
          column.getElement().data('layout-id', id);
          this.element.append(column.getElement());
        }
      },

      getColumns: function() {
        return this.columns;
      },

      insertBlock : function(columnId, blocktype, content, height) {
        var column = this.columns[columnId];
        return column.insertBlock(blocktype, content, height);
      },

      deleteBlock : function(columnId, blockId) {
        var column = this.columns[columnId];
        column.deleteBlock(blockId);
      },

      commitBlocks : function(columnId) {
        this.getColumns()[columnId].commitBlocks();
      },

      toJSON : function() {
        return {columns : this.columns};
      }

    };
  }

  return Layout;

});

define('simplelayout/Layoutmanager',["simplelayout/Layout"], function(Layout) {



  function Layoutmanager(_options) {

    if (!(this instanceof Layoutmanager)) {
      throw new TypeError("Layoutmanager constructor cannot be called as a function.");
    }

    var options = $.extend({
      width : '100%',
      blockHeight : '100px',
    }, _options || {});

    var element = $("<div>").addClass('sl-simplelayout').css('width', options.width);

    var layoutId = 0;

    return {

      layouts: {},

      minImageWidth: null,

      options : options,

      element : element,

      attachTo: function(target) {
        target.append(element);
      },

      getElement: function() {
        return this.element;
      },

      insertLayout: function(columns) {
        var id = layoutId;
        var layout = new Layout(columns);
        layout.create(id);
        layout.getElement().data('layout-id', id);
        element.append(layout.getElement());
        this.layouts[id] = layout;
        layoutId++;
        this.element.trigger("layoutInserted", [id]);
        return id;
      },

      deleteLayout: function(layoutId) {
        this.layouts[layoutId].getElement().remove();
        delete this.layouts[layoutId];
        this.element.trigger("layoutDeleted");
      },

      commitLayouts: function() {
        for (var key in this.layouts) {
          this.layouts[key].committed = true;
        }
        this.element.trigger("layoutsCommitted");
      },

      getCommittedLayouts: function() {
        var committedLayouts = {};
        for (var key in this.layouts) {
          if (this.layouts[key].committed) {
            committedLayouts[key] = this.layouts[key];
          }
        }
        return committedLayouts;
      },

      getLayouts: function() {
        return this.layouts;
      },

      insertBlock: function(layoutId, columnId, blocktype, content, height) {
        var blockHeight = height || this.options.blockHeight;
        var layout = this.layouts[layoutId];
        var blockId = layout.insertBlock(columnId, blocktype, content, blockHeight);
        this.layouts[layoutId].getColumns()[columnId].getBlocks()[blockId].getElement().find('img').width(this.minImageWidth);
        this.element.trigger("blockInserted", [layoutId, columnId, blockId]);
        return blockId;
      },

      deleteBlock: function(layoutId, columnId, blockId) {
        var layout = this.layouts[layoutId];
        layout.deleteBlock(columnId, blockId);
        this.element.trigger("blockDeleted");
      },

      commitBlocks: function(layoutId, columnId) {
        this.getLayouts()[layoutId].commitBlocks(columnId);
        this.element.trigger("blocksCommitted", [layoutId, columnId]);
      },

      moveBlock: function(oldLayoutId, oldColumnId, blockId, newLayoutId, newColumnId) {
        var layout = this.getLayouts()[oldLayoutId];
        var column = layout.getColumns()[oldColumnId];
        var block = column.getBlocks()[blockId];
        block.getElement().data('layoutId', newLayoutId);
        block.getElement().data('columnId', newColumnId);
        delete column.getBlocks()[blockId];
        this.getLayouts()[newLayoutId].getColumns()[newColumnId].getBlocks()[blockId] = block;
        this.element.trigger("blockMoved", [oldLayoutId, oldColumnId, blockId, newLayoutId, newColumnId]);
      },

      serialize: function() {
        return JSON.stringify({layouts : this.layouts});
      },

      deserialize :function(serializedObjects) {
        var layoutStructure = JSON.parse(serializedObjects);
        for(var layout in layoutStructure.layouts) {
          var layoutId = this.insertLayout(Object.keys(layoutStructure.layouts[layout].columns).length);
          this.commitLayouts();
          for(var column in layoutStructure.layouts[layout].columns) {
            for(var blockKey in layoutStructure.layouts[layout].columns[column].blocks) {
              var block = layoutStructure.layouts[layout].columns[column].blocks[blockKey];
              this.insertBlock(layout, column, block, block.type, block.height);
              this.commitBlocks(layout, column);
            }
          }
        }
        this.element.trigger('deserialized');
      }

    };

  }

  return Layoutmanager;

});

define('simplelayout/Eventrecorder',[], function() {



  function Eventrecorder() {

    if (!(this instanceof Eventrecorder)) {
      throw new TypeError("Eventrecorder constructor cannot be called as a function.");
    }

    return {

      eventId : 0,

      eventQueue : {},

      record : function(event) {
        $(event.target).data('event-id', this.eventId);
        this.eventQueue[this.eventId] = event;
        this.eventId++;
      },

      lookup : function(event) {
        var eventLookup = this.eventQueue[$(event.target).data('event-id')];
        if(!eventLookup) {
          throw new Error('No event for lookup.');
        }
        return eventLookup;
      },

      getEventQueue : function() {
        return this.eventQueue;
      },

      flush : function() {
        this.eventQueue = {};
        this.eventId = 0;
      }
    };

  }

  return Eventrecorder;

});

define('simplelayout/Simplelayout',['simplelayout/Layoutmanager', 'simplelayout/Eventrecorder'], function(Layoutmanager, Eventrecorder) {



  function Simplelayout(_options) {

    if (!(this instanceof Simplelayout)) {
      throw new TypeError("Simplelayout constructor cannot be called as a function.");
    }

    var options = $.extend({
      imageCount: 1
    }, _options || {});

    var eventrecorder = new Eventrecorder();

    var layoutmanager = new Layoutmanager(_options);

    var toolbox;

    var BLOCK_RESIZABLE_SETTINGS = {
      handles: "s",
      resize: function(e, ui) {
        var layoutId = ui.element.data('layout-id');
        var columnId = ui.element.data('column-id');
        var blockId = ui.element.data('blockId');
        layoutmanager.getLayouts()[layoutId].getColumns()[columnId].getBlocks()[blockId].height = (ui.size.height);
      },
      create : function(e, ui) {
        $(e.target).find('.ui-resizable-s').addClass('icon-resize');
      }
    };

    var TOOLBOX_COMPONENT_DRAGGABLE_SETTINGS = {
      helper: "clone",
      cursor: "pointer"
    };

    var TRASH_DROPPABLE_SETTINGS = {
      accept: '.sl-layout, .sl-block',
      tolerance: 'touch',
      over: function(e, ui) {
        var layoutId;
        if (ui.draggable.hasClass('sl-layout')) {
          layoutId = ui.draggable.data('layout-id');
          var layout = layoutmanager.getLayouts()[layoutId];
          var hasBlocks = false;
          for (var key in layout.getColumns()) {
            if (Object.keys(layout.getColumns()[key].getBlocks()).length > 0) {
              hasBlocks = true;
              break;
            }
          }
          layout.getElement().addClass('deleted');
          if (hasBlocks) {
            layout.getElement().addClass('cancelDeletion');
          }
        } else {
          layoutId = ui.draggable.data('layout-id');
          var columnId = ui.draggable.data('column-id');
          var blockId = ui.draggable.data('block-id');
          var block = layoutmanager.getLayouts()[layoutId].getColumns()[columnId].getBlocks()[blockId];
          block.getElement().addClass('deleted');
        }
      },
      drop: function(e, ui) {
        var layoutId;
        if (ui.draggable.hasClass('sl-layout')) {
          layoutId = ui.draggable.data('layout-id');
          var layout = layoutmanager.getLayouts()[layoutId];
          if (!layout.getElement().hasClass('cancelDeletion')) {
            layoutmanager.deleteLayout(layoutId);
          }
          layout.getElement().removeClass('deleted cancelDeletion');
        } else {
          layoutId = ui.draggable.data('layout-id');
          var columnId = ui.draggable.data('column-id');
          var blockId = ui.draggable.data('block-id');
          var block = layoutmanager.getLayouts()[layoutId].getColumns()[columnId].getBlocks()[blockId];
          layoutmanager.deleteBlock(layoutId, columnId, blockId);
        }
      },
      out: function(e, ui) {
        if (ui.draggable.hasClass('sl-layout')) {
          var layoutId = ui.draggable.data('layout-id');
          var layout = layoutmanager.getLayouts()[layoutId];
          layout.getElement().removeClass('deleted cancelDeletion');
        } else {
          var layoutId = ui.draggable.data('layout-id');
          var columnId = ui.draggable.data('column-id');
          var blockId = ui.draggable.data('block-id');
          var block = layoutmanager.getLayouts()[layoutId].getColumns()[columnId].getBlocks()[blockId];
          block.getElement().removeClass('deleted');
        }
      }
    };

    var LAYOUTMANAGER_SORTABLE_SETTINGS = {
      connectWith: '.sl-simplelayout',
      items: '.sl-layout',
      placeholder: "placeholder",
      forcePlaceholderSize: true,
    };

    var LAYOUT_SORTABLE_SETTINGS = {
      connectWith: '.sl-column, .tb-trash',
      placeholder: "placeholder",
      forcePlaceholderSize: true,
      receive: function(e, ui) {
        var target = $(e.target);
        var columnId = ui.item.data('column-id');
        var layoutId = ui.item.data('layout-id');
        var blockId = ui.item.data('block-id');
        var type = ui.item.data('type');
        var content = ui.item.html();
        var newColumnId = target.data('column-id');
        var newLayoutId = target.data('layout-id');
        layoutmanager.moveBlock(layoutId, columnId, blockId, newLayoutId, newColumnId, type, content);
      },
    };

    var LAYOUT_DROPPABLE_SETTINGS = {
      accept: '.sl-toolbox-component',
      over: function(e, ui) {
        try {
          var layoutId = $(this).parent().data('layout-id');
          var columnId = $(this).data('column-id');
          var type = ui.draggable.data('type');
          var blockId = layoutmanager.insertBlock(layoutId, columnId, type, '<p>I am a block</p>');
          e.data = {
            blockId: blockId,
            columnId: columnId,
            layoutId: layoutId
          };
          eventrecorder.record(e);
        } catch (err) {}
      },
      out: function(e) {
        try {
          var originalOverEventData = eventrecorder.lookup(e).data;
          layoutmanager.deleteBlock(originalOverEventData.layoutId, originalOverEventData.columnId, originalOverEventData.blockId);
        } catch (err) {}
      },
      drop: function(e) {
        try {
          var originalOverEventData = eventrecorder.lookup(e).data;
          layoutmanager.commitBlocks(originalOverEventData.layoutId, originalOverEventData.columnId);
          layoutmanager.getLayouts()[originalOverEventData.layoutId].getElement().find('.sl-column').sortable('refresh');
          eventrecorder.flush();
        } catch (err) {}
      }
    };

    var LAYOUTMANAGER_DROPPABLE_SETTINGS = {
      accept: ".sl-toolbox-layout",
      over: function(e, ui) {
        try {
          var columns = ui.draggable.data('columns');
          var layoutId = layoutmanager.insertLayout(columns);
          e.data = {
            layoutId: layoutId
          };
          eventrecorder.record(e);
        } catch(err) {}
      },
      out: function(e) {
        try {
          layoutmanager.deleteLayout(eventrecorder.lookup(e).data.layoutId);
        } catch(err) {}
      },
      drop: function(e) {
        try {
          var originalOverEventData = eventrecorder.lookup(e).data;
          layoutmanager.commitLayouts();
          layoutmanager.getLayouts()[originalOverEventData.layoutId].getElement().find('.sl-layout').sortable('refresh');
          eventrecorder.flush();
        } catch (err) {}
      }
    };

    var TOOLBOX_DRAGGABLE_SETTINGS = {
      cursor: "pointer",
      containment : 'window',
      handle : '.sl-toolbox-handle'
    };

    var bindLayoutEvents = function() {
      layoutmanager.getElement().droppable(LAYOUTMANAGER_DROPPABLE_SETTINGS);
      layoutmanager.getElement().sortable(LAYOUTMANAGER_SORTABLE_SETTINGS);
    };

    var bindToolboxEvents = function() {
      toolbox.getElement().find('.sl-toolbox-component, .sl-toolbox-layout').draggable(TOOLBOX_COMPONENT_DRAGGABLE_SETTINGS);
      toolbox.getElement().find('.sl-toolbox-trash').droppable(TRASH_DROPPABLE_SETTINGS);
      layoutmanager.getElement().on('blockInserted', function(e, layoutId, columnId, blockId) {
        layoutmanager.getLayouts()[layoutId].getColumns()[columnId].getBlocks()[blockId].getElement().resizable(BLOCK_RESIZABLE_SETTINGS);
      });

      layoutmanager.getElement().on('layoutInserted', function(e, layoutId) {
        layoutmanager.getLayouts()[layoutId].getElement().find('.sl-column').droppable(LAYOUT_DROPPABLE_SETTINGS).sortable(LAYOUT_SORTABLE_SETTINGS);
      });

      toolbox.getElement().draggable(TOOLBOX_DRAGGABLE_SETTINGS);

    };

    bindLayoutEvents();

    return {

      options: options,

      getLayoutmanager: function() {
        return layoutmanager;
      },

      getEventrecorder: function() {
        return eventrecorder;
      },

      getToolbox: function() {
        return toolbox;
      },

      attachTo: function(target) {
        layoutmanager.attachTo(target);
      },

      attachToolbox: function(toolboxRef) {
        if (!toolboxRef) {
          throw new Error('No toolbox defined');
        }
        if (layoutmanager.getElement().parent().length === 0) {
          throw new Error('Not attached to DOM element');
        }
        toolbox = toolboxRef;
        layoutmanager.minImageWidth = layoutmanager.getElement().width() / Math.max.apply(null, toolbox.options.layouts) / this.options.imageCount;
        bindToolboxEvents();
      }

    };

  }

  return Simplelayout;

});

define('toolbox/Toolbox',[], function() {



  function Toolbox(_options) {

    if (!(this instanceof Toolbox)) {
      throw new TypeError("Toolbox constructor cannot be called as a function.");
    }

    var options = $.extend({
      layouts: []
    }, _options || {});

    var layouts = [];
    $.each(options.layouts, function(i, el) {
      layouts.push({
        columns: el
      });
    });

    var minImageCount = 100 / Math.max.apply(null, options.layouts) / options.imageCount;

    var template = $.templates(
      "<div id='sl-toolbox' class='sl-toolbox'> \
          <div class='components'> \
            <a class='sl-toolbox-header sl-toolbox-handle'>Toolbox</a> \
            <a class='sl-toolbox-header'>Komponenten</a> \
              {{for blocks}} \
                <a class='sl-toolbox-component' data-type='{{:type}}'> \
                  <i class='{{:icon}}'></i>{{:title}} \
                </a> \
              {{/for}} \
            <a class='sl-toolbox-header'>Layout</a> \
              {{for layouts}} \
                <a class='sl-toolbox-layout' data-columns='{{:columns}}'> \
                  <i class='icon-layout'></i>{{:columns}} - Spalten Layout \
                </a> \
               {{/for}} \
          </div> \
          <div class='sl-toolbox-trash'> \
            <i class='icon-trash'></i> \
          </div> \
        </div>");

    var components = {
      "blocks": [{
        "type": "listingblock",
        "title": "Listingblock",
        "icon": "icon-listing-block"
      }, {
        "type": "textblock",
        "title": "Textblock",
        "icon": "icon-text-block"
      }],
      "layouts": layouts
    };

    var element = $(template.render(components));

    return {

      options : options,

      attachTo: function(target) {
        target.append(element);
      },

      getMinImageWidth : function() {
        return minImageCount;
      },

      getElement : function() {
        return element;
      }

    };

  }
  return Toolbox;

});

define('overlay/Overlay',[], function() {



  function Overlay(_options) {
    if (!(this instanceof Overlay)) {
      throw new TypeError("Overlay constructor cannot be called as a function.");
    }

    var options = $.extend({target : 'body'}, _options || {});

    var template = $.templates('<div class="sl-overlay"><div class="sl-overlay-modal"><div class="sl-overlay-content">{{:content}}</div><span class="sl-overlay-handler"><i class="icon-close"></i></span></div></div>');

    var target = $(options.target);

    var closeHandle;

    var modal;

    var overflow;

    return {

      options : options,

      element : null,

      create : function(content) {
        var that = this;
        this.element = $(template.render({content : content}));
        closeHandle = $('.sl-overlay-handler', this.element);
        modal = $('.sl-overlay-modal', this.element);
        target.append(this.element);
        this.element.show();
        var marginLeft = "-" + modal.width() / 2 + 'px';
        var marginTop = "-" + modal.height() / 2 + 'px';
        modal.css('margin-left', marginLeft);
        modal.css('margin-top', marginTop);
        closeHandle.off('click').on('click', function() {that.close.call(that);});
        this.element.hide();
      },

      open : function(content) {
        var that = this;
        var modal;
        if(!this.element) {
          this.create(content);
        }
        this.element.show();
        overflow = target.css('overflow');
        target.css('overflow', 'hidden');
      },

      close : function() {
        if(this.element) {
          this.element.hide();
          target.css('overflow', overflow);
        }
      },

      content : function(content) {
        if(!this.element) {
          this.create(content);
        }
        $('.sl-overlay-content', this.element).html(content);
      },

      getElement : function() {
        if(!this.element) {
          this.create();
        }
        return this.element;
      }
    };
  }

  return Overlay;

});

var Simplelayout = require('simplelayout/Simplelayout');
var Toolbox = require('toolbox/Toolbox');
var Overlay = require('overlay/Overlay');
window.Simplelayout = Simplelayout;
window.Toolbox = Toolbox;
window.Overlay = Overlay;
}($));